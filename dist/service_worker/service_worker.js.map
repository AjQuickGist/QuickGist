{"version":3,"file":"service_worker/service_worker.js","mappings":"mBAyBA,IAAYA,ECrBZ,IAAIC,GDqBJ,SAAYD,GACR,uBACA,uBACA,qBACA,mBACA,uBACA,mBACA,+BACA,mBACA,yBACA,2BACA,6BACH,CAZD,CAAYA,IAAAA,EAAM,KCnBlB,WAEI,MAAME,QAAqBC,GAAGF,WAAWG,eACrCF,GAA2C,OAA3BA,EAAaG,YACE,YAA3BH,EAAaG,UAEbJ,QAAmBE,GAAGF,WAAWK,OAAO,CACpCC,KAAM,QACNC,OAAQ,aACRC,OAAQ,YAIZR,QAAmBE,GAAGF,WAAWK,eAC3BL,EAAWS,OAK5B,EAnBD,GAqBAC,OAAOC,QAAQC,YAAYC,aAAY,KACnCH,OAAOI,QAAQC,MAAMC,IAAI,CAACC,SAAS,GAAM,IAG7CP,OAAOC,QAAQO,UAAUL,aAAY,CAACM,EAASC,EAAQC,K,MACnD,OAAQF,EAAQG,QACZ,KAAKvB,EAAOwB,OACRF,EAAa,CAACG,MAAiB,QAAV,EAAAJ,EAAOK,WAAG,eAAEC,KACjC,MAEJ,KAAK3B,EAAO4B,UACR,MAAMC,EAAUT,EAAQS,QACxB,OAAK5B,GAGLA,EAAW6B,UAAUD,EAAQE,UAAU,EAxCvB,MAwCgDC,MAAMC,IAClEX,EAAaW,EAAQ,KAElB,GALIJ,EAAQE,UAAU,EAAG,KAMxC,G","sources":["webpack://quickgist/./src/common/common.ts","webpack://quickgist/./src/service_worker/service_worker.ts"],"sourcesContent":["type GistMetadata = {\r\n    anchor: HTMLElement\r\n    click: {\r\n        clientX: number, clientY: number,\r\n        screenX: number, screenY: number\r\n    }\r\n}\r\n\r\nexport type Analysis = {\r\n    summary?: string\r\n}\r\n\r\nexport type Gist = {\r\n    id: string,\r\n    url: string,\r\n    metadata: GistMetadata\r\n    analysis?: Analysis\r\n\r\n}\r\n\r\nexport type Position = {\r\n    top: number\r\n    left: number\r\n}\r\n\r\nexport enum Action {\r\n    WHOAMI,\r\n    CREATE,\r\n    CLOSE,\r\n    SHOW,\r\n    EXPAND,\r\n    HIDE,\r\n    MOVE_START,\r\n    MOVE,\r\n    ANALYZE,\r\n    ANALYSIS,\r\n    SUMMARIZE\r\n}\r\n\r\nexport class AnalysisService {\r\n\r\n    async analyze(content: string): Promise<Analysis> {\r\n        const summary = await chrome.runtime.sendMessage({\r\n            action: Action.SUMMARIZE,\r\n            content: content\r\n        })\r\n\r\n        return {\r\n            summary: summary,\r\n        }\r\n    }\r\n}","import {Action} from \"../common/common\";\r\n\r\nconst MAX_SUMMARIZE_CHARS = 4000\r\n\r\nlet summarizer: any\r\n\r\n(async () => {\r\n//@ts-ignore\r\n    const canSummarize = await ai.summarizer.capabilities()\r\n    if (canSummarize && canSummarize.available !== 'no') {\r\n        if (canSummarize.available === 'readily') {\r\n            //@ts-ignore\r\n            summarizer = await ai.summarizer.create({\r\n                type: 'tl;dr',\r\n                format: 'plain-text',\r\n                length: 'medium'\r\n            })\r\n        } else {\r\n            //@ts-ignore\r\n            summarizer = await ai.summarizer.create()\r\n            await summarizer.ready\r\n        }\r\n    } else {\r\n        // The summarizer can't be used at all.\r\n    }\r\n})()\r\n\r\nchrome.runtime.onInstalled.addListener(() => {\r\n    chrome.storage.local.set({enabled: true})\r\n})\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    switch (message.action) {\r\n        case Action.WHOAMI:\r\n            sendResponse({tabId: sender.tab?.id})\r\n            break\r\n\r\n        case Action.SUMMARIZE:\r\n            const content = message.content\r\n            if (!summarizer) {\r\n                return content.substring(0, 100)\r\n            }\r\n            summarizer.summarize(content.substring(0, MAX_SUMMARIZE_CHARS)).then((summary: any) => {\r\n                sendResponse(summary)\r\n            })\r\n            return true\r\n    }\r\n})"],"names":["Action","summarizer","canSummarize","ai","capabilities","available","create","type","format","length","ready","chrome","runtime","onInstalled","addListener","storage","local","set","enabled","onMessage","message","sender","sendResponse","action","WHOAMI","tabId","tab","id","SUMMARIZE","content","summarize","substring","then","summary"],"sourceRoot":""}