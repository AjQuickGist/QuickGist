{"version":3,"file":"content/ctrlframe.js","mappings":"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","sources":["webpack://quickgist/./src/common/common.ts","webpack://quickgist/./src/content/ctrlframe.ts"],"sourcesContent":["type GistMetadata = {\r\n    anchor: HTMLElement\r\n    click: {\r\n        clientX: number, clientY: number,\r\n        screenX: number, screenY: number\r\n    }\r\n}\r\n\r\nexport type Analysis = {\r\n    summary?: string\r\n}\r\n\r\nexport type Gist = {\r\n    id: string,\r\n    url: string,\r\n    metadata: GistMetadata\r\n    analysis?: Analysis\r\n\r\n}\r\n\r\nexport type Position = {\r\n    top: number\r\n    left: number\r\n}\r\n\r\nexport enum Action {\r\n    WHOAMI,\r\n    CREATE,\r\n    CLOSE,\r\n    SHOW,\r\n    EXPAND,\r\n    HIDE,\r\n    MOVE_START,\r\n    MOVE,\r\n    ANALYZE,\r\n    ANALYSIS,\r\n    SUMMARIZE\r\n}\r\n\r\nexport class AnalysisService {\r\n\r\n    async analyze(content: string): Promise<Analysis> {\r\n        const summary = await chrome.runtime.sendMessage({\r\n            action: Action.SUMMARIZE,\r\n            content: content\r\n        })\r\n\r\n        return {\r\n            summary: summary,\r\n        }\r\n    }\r\n}","import {Action, type Analysis, type Position} from \"../common/common\";\r\n\r\nconst urlParams = new URLSearchParams(window.location.search);\r\nconst frameTabId = Number.parseInt(urlParams.get('tabId')!);\r\n\r\ntype Preview = {\r\n    winId: number\r\n    tabId: number\r\n    moveWidth?: number\r\n    moveHeight?: number\r\n}\r\n\r\nconst previewMap: Map<string, Preview> = new Map<string, Preview>()\r\n\r\n// Maps tabIds to gistIds\r\nconst tabMap: Map<number, string> = new Map<number, string>()\r\n\r\nfunction onTabCreated(tabId: number, gistId: string) {\r\n    analyzeTab(tabId).then(analysis => {\r\n        chrome.tabs.sendMessage(frameTabId, {\r\n            action: Action.ANALYSIS,\r\n            gistId: gistId,\r\n            analysis: analysis\r\n        })\r\n    })\r\n}\r\n\r\nfunction createPreview(gistId: string, url: string, position: Position) {\r\n    chrome.windows.create({\r\n        top: Math.round(position.top),\r\n        left: Math.round(position.left),\r\n        width: 400,\r\n        height: 500,\r\n        url: url,\r\n        type: 'panel'\r\n    }, (win) => {\r\n        const tabId = win?.tabs?.[0]?.id;\r\n        if (!(win && tabId)) {\r\n            throw new Error()\r\n        }\r\n\r\n        const preview: Preview = {\r\n            winId: win.id!,\r\n            tabId: tabId,\r\n            moveWidth: win.width,\r\n            moveHeight: win.height\r\n        }\r\n\r\n        previewMap.set(gistId, preview)\r\n        tabMap.set(tabId, gistId)\r\n\r\n        addEventListener(\"beforeunload\", (event) => {\r\n            chrome.windows.remove(win.id!);\r\n        });\r\n\r\n        addEventListener(\"visibilitychange\", (_) => {\r\n            if (document.hidden) {\r\n                chrome.windows.update(win.id!, {\r\n                    state: 'minimized'\r\n                })\r\n            }\r\n        });\r\n        chrome.tabs.onUpdated.addListener((changeTabId, changeInfo, changeTab) => {\r\n            if (changeTabId !== tabId) {\r\n                return\r\n            }\r\n            if (changeInfo.status == 'complete') {\r\n                onTabCreated(tabId, gistId)\r\n            }\r\n            if (changeInfo.status == 'loading') {\r\n                chrome.tabs.setZoomSettings(tabId, {\r\n                    mode: 'automatic',\r\n                    scope: 'per-tab',\r\n                    defaultZoomFactor: 0.3\r\n                }).then(() => {\r\n                    chrome.tabs.setZoom(tabId, 0.3)\r\n                })\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction analyzeTab(tabId: number): Promise<Analysis> {\r\n    return chrome.tabs.sendMessage(tabId, {action: Action.ANALYZE})\r\n}\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n\r\n    // Only accept messages from our own tab, or preview tabs that we created\r\n    if (!sender.tab?.id) {\r\n        return\r\n    }\r\n\r\n    if (tabMap.has(sender.tab.id)) {\r\n        switch (message.action) {\r\n\r\n            case Action.ANALYSIS:\r\n                break\r\n\r\n        }\r\n\r\n    } else if (sender.tab.id !== frameTabId) {\r\n        return\r\n    }\r\n\r\n    if (message.action == Action.CREATE) {\r\n        createPreview(message.gistId, message.url, message.position)\r\n        return\r\n    }\r\n\r\n    const preview = previewMap.get(message.gistId)\r\n    if (!preview) {\r\n        return\r\n    }\r\n    const winId = preview.winId\r\n\r\n    switch (message.action) {\r\n\r\n        case Action.CLOSE:\r\n            chrome.windows.remove(preview.winId)\r\n            break\r\n\r\n        case Action.SHOW:\r\n            chrome.windows.update(winId, {focused: true})\r\n            break\r\n\r\n        case Action.EXPAND:\r\n            chrome.tabs.get(frameTabId).then(frameTab => {\r\n                chrome.tabs.move(preview.tabId, {\r\n                    index: frameTab.index + 1,\r\n                    windowId: frameTab.windowId\r\n                }).then(previewTab => {\r\n                    chrome.tabs.setZoom(preview.tabId, 1)\r\n                })\r\n            })\r\n            break\r\n\r\n        case Action.MOVE_START:\r\n            chrome.windows.get(winId).then(win => {\r\n                preview.moveWidth = win.width!\r\n                preview.moveHeight = win.height!\r\n            })\r\n            break\r\n\r\n        case Action.MOVE:\r\n\r\n            chrome.windows.update(winId, {\r\n                focused: true,\r\n                left: Math.floor(message.position.left),\r\n                top: Math.floor(message.position.top),\r\n                width: preview.moveWidth,\r\n                height: preview.moveHeight\r\n            }).catch(e => {\r\n                chrome.windows.update(winId, {state: 'minimized'})\r\n            })\r\n            break\r\n\r\n        case Action.HIDE:\r\n            chrome.windows.update(preview.winId, {\r\n                state: 'minimized'\r\n            })\r\n            break\r\n\r\n        case Action.ANALYZE:\r\n            analyzeTab(preview.tabId).then(analysis => {\r\n                sendResponse(analysis)\r\n            })\r\n            break\r\n\r\n        default:\r\n            return false\r\n    }\r\n    return true\r\n})"],"names":["Action","urlParams","URLSearchParams","window","location","search","frameTabId","Number","parseInt","get","previewMap","Map","tabMap","analyzeTab","tabId","chrome","tabs","sendMessage","action","ANALYZE","runtime","onMessage","addListener","message","sender","sendResponse","gistId","url","position","tab","id","has","ANALYSIS","CREATE","windows","create","top","Math","round","left","width","height","type","win","Error","preview","winId","moveWidth","moveHeight","set","addEventListener","event","remove","_","document","hidden","update","state","onUpdated","changeTabId","changeInfo","changeTab","status","then","analysis","onTabCreated","setZoomSettings","mode","scope","defaultZoomFactor","setZoom","CLOSE","SHOW","focused","EXPAND","frameTab","move","index","windowId","previewTab","MOVE_START","MOVE","floor","catch","e","HIDE"],"sourceRoot":""}